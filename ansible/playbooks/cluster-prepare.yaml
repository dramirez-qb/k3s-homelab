#!/usr/bin/env ansible-playbook
# -*- coding: utf-8 -*-
# When I wrote this, only God and I understood what I was doing
# Now, God only knows
# vim:ff=unix ts=2 sw=2 ai expandtab
---
- name: Prepare System
  hosts: all
  become: true
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - name: Pausing for 5 seconds...
      ansible.builtin.pause:
        seconds: 5
  tasks:
    - name: Locale
      block:
        - name: Locale | Set timezone
          community.general.timezone:
            name: "{{ timezone | default('Etc/UTC') }}"

    - name: Packages
      block:
        - name: Gather installed packages
          ansible.builtin.package_facts:
            manager: auto

        - name: Packages | Install
          ansible.builtin.apt:
            name: apt-transport-https,ca-certificates,conntrack,curl,dirmngr,fuse-overlayfs,gdisk,gnupg,hdparm,htop,
              iperf3,iptables,iputils-ping,ipvsadm,libseccomp2,lm-sensors,lvm2,neofetch,net-tools,nfs-common,
              nvme-cli,open-iscsi,parted,psmisc,python3,python3-apt,python3-kubernetes,python3-yaml,
              qemu-guest-agent,smartmontools,socat,software-properties-common,unzip,util-linux
            install_recommends: false
            update_cache: yes

    - name: Snapd clean up
      block:
        - name: Check if snap is installed
          ansible.builtin.debug:
            msg: "snapd is installed"
          register: snapd_check

        - name: Nodes | RIP Snapd -> Remove snap packages
          ansible.builtin.shell: |
            echo "Attempting to remove snapd packages"
            snap list --all | while read snapname ver rev trk pub notes; do (snap remove "$snapname" | tee /dev/stdout) || true ; done
          args:
            executable: /bin/bash
          register: snapd_packages_removed
          retries: 5
          until: snapd_packages_removed is success
          when:
            - snapd_check.failed is defined

        - name: Nodes | RIP Snapd -> Uninstall APT snapd package
          ansible.builtin.apt:
            name: snapd
            state: absent
            autoclean: yes
            install_recommends: no
          register: snapd_package

        - name: Nodes | RIP Snapd -> remove files
          ansible.builtin.file:
            state: absent
            path: "{{ item }}"
          loop:
            - "/var/snap"
            - "/var/lib/snapd"
            - "/var/cache/snapd"
            - "/usr/lib/snapd"
            - "/snap"
          retries: "{{ retry_count | default(3) }}"
          register: snapd_folders_removed
          until: snapd_folders_removed is success
          delay: 3
      when:
        - "'snapd' in ansible_facts.packages"
        - clean_snapd | default(false)

    - name: User Configuration
      block:
        - name: User Configuration | SSH keys
          ansible.posix.authorized_key:
            user: "{{ ansible_user }}"
            key: "https://github.com/{{ github_username }}.keys"
        - name: User Configuration | Silence login
          ansible.builtin.file:
            dest: "{{ '/home/' + ansible_user if ansible_user != 'root' else '/root' }}/.hushlogin"
            state: touch
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: "0644"
            modification_time: preserve
            access_time: preserve

    - name: Network Configuration
      notify: Reboot
      block:
        - name: Network Configuration | Set hostname
          ansible.builtin.hostname:
            name: "{{ inventory_hostname }}"
        - name: Network Configuration | Update hosts
          ansible.builtin.copy:
            content: |
              127.0.0.1 localhost
              127.0.1.1 {{ inventory_hostname }}
              # The following lines are desirable for IPv6 capable hosts
              ::1     localhost ip6-localhost ip6-loopback
              ff02::1 ip6-allnodes
              ff02::2 ip6-allrouters
            dest: /etc/hosts
            mode: preserve
        # https://github.com/cilium/cilium/issues/18706
        - name: Network Configuration | Cilium (1)
          ansible.builtin.lineinfile:
            dest: /etc/systemd/networkd.conf
            regexp: ManageForeignRoutingPolicyRules
            line: ManageForeignRoutingPolicyRules=no
        - name: Network Configuration | Cilium (2)
          ansible.builtin.lineinfile:
            dest: /etc/systemd/networkd.conf
            regexp: ManageForeignRoutes
            line: ManageForeignRoutes=no

    - name: System Configuration
      notify: Reboot
      block:
        - name: GRUB_CMDLINE_LINUX_DEFAULT entry for /etc/default/grub.d/50-cloudimg-settings.cfg
          ansible.builtin.lineinfile:
            dest: /etc/default/grub.d/50-cloudimg-settings.cfg
            regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
            line: 'GRUB_CMDLINE_LINUX_DEFAULT="cgroup_enable=memory iommu=pt intel_iommu=on systemd.unified_cgroup_hierarchy=1 console=tty1 console=ttyS0"'
            state: present
            create: true
        - name: Update grub # noqa: no-changed-when
          ansible.builtin.command: "update-grub2"
        - name: System Configuration | Neofetch
          ansible.builtin.copy:
            dest: /etc/profile.d/neofetch.sh
            mode: "0755"
            content: neofetch --config none
        - name: System Configuration | Disable apparmor
          ansible.builtin.systemd:
            name: apparmor
            state: stopped
            masked: true
        - name: System Configuration | Disable swap
          ansible.posix.mount:
            name: "{{ item }}"
            fstype: swap
            state: absent
          loop: ["none", "swap"]
        - name: System Configuration | Kernel modules (1)
          community.general.modprobe:
            name: "{{ item }}"
            state: present
          loop: ["br_netfilter", "ceph", "ip_vs", "ip_vs_rr", "nbd", "overlay", "rbd"]
        - name: System Configuration | Kernel modules (2)
          ansible.builtin.copy:
            dest: "/etc/modules-load.d/{{ item }}.conf"
            mode: "0644"
            content: "{{ item }}"
          loop: ["br_netfilter", "ceph", "ip_vs", "ip_vs_rr", "nbd", "overlay", "rbd"]
        - name: System Configuration | Sysctl
          ansible.posix.sysctl:
            name: "{{ item.key }}"
            value: "{{ item.value }}"
            sysctl_file: /etc/sysctl.d/99-kubernetes.conf
            reload: true
          with_dict: "{{ sysctl_config }}"
          vars:
            sysctl_config:
              fs.inotify.max_queued_events: 65536
              fs.inotify.max_user_watches: 524288
              fs.inotify.max_user_instances: 8192

  handlers:
    - name: Reboot
      ansible.builtin.reboot:
        msg: Rebooting nodes
        reboot_timeout: 3600
